import pandas as pd
import plotly.graph_objects as go
import plotly.io as pio
import os



unique = '_Hyd0' # Write the unique ending that you used in the iteration file
png_save = False  # Set to tTrue if you want to save pngs
html_addition = 'zero' # Write a unique little ending for you htmls if needed

# Load file paths from Comp_library
with open(r'.\Comp_library'+unique+'.txt', 'r') as f:
    dataset_paths = [line.strip() for line in f if line.strip()]

# Column indices
x_col = 2
y_col = 1
z_col = 0

# Font sizes
axis_font = 15
axis_t_font = 17
cbar_font = 20

c_dict = {
    # 'mineral':[ccolmin, ccolmax]
    }

for path in dataset_paths:
    print("Searching for global c_min and c_max")
    df = pd.read_csv(path)
    header = df.columns.tolist()

    for c_col in range(3, len(header) - 1):
        c_name = header[c_col]
        c = df.iloc[:, c_col]
        c_min = c.min()
        c_max = c.max()
        
        if c_name not in c_dict:
            c_dict.update({c_name:[c_min,c_max]})
        else:
            if c_dict[c_name][0] > c_min:
                c_dict[c_name][0] = c_min
            if c_dict[c_name][1] < c_max:
                c_dict[c_name][1] = c_max


# HTML container for all plots
mineral_htmls = {}
for c_col in list(c_dict.keys()):
    for i, path in enumerate(dataset_paths):
        base_name = os.path.splitext(os.path.basename(path))[0]
        df = pd.read_csv(path)
        header = df.columns.tolist()
        DataCube_dict = df.to_dict()
        
        if c_col in header[3:]:
            short_header = c_col.split('(')[0]
            
            X = list(DataCube_dict[header[x_col]].values())
            Y = list(DataCube_dict[header[y_col]].values())
            Z = list(DataCube_dict[header[z_col]].values())
            c = list(DataCube_dict[c_col].values())
        
            fig = go.Figure(data=go.Isosurface(
                x=X, y=Y, z=Z, value=c,
                isomin=c_dict[c_col][0], isomax=c_dict[c_col][1],
                surface_count=15, opacity=1,
                caps=dict(x_show=False, y_show=False, z_show=False),
                colorscale='magma_r',
                colorbar=dict(title=c_col),
                colorbar_title_font = dict(size=cbar_font),
                colorbar_tickfont = dict(size=cbar_font),
                lighting=dict(ambient=0.91)
            ))
        
            fig.update_layout(
        #        title=f"{os.path.basename(path)}",
                margin=dict(l=0, r=0, b=0, t=30),
                scene=dict(
                    xaxis_title=os.path.basename(path)[2:-4-len(unique)],
                    xaxis_title_font = dict(size=axis_t_font),
                    xaxis_tickfont = dict(size=axis_font),
                    yaxis_title=header[y_col][0:-3]+'(Celsius)',
                    yaxis_title_font = dict(size=axis_t_font),
                    yaxis_tickfont = dict(size=axis_font),
                    zaxis_title=header[z_col],
                    zaxis_title_font = dict(size=axis_t_font),
                    zaxis_tickfont = dict(size=axis_font),
                    camera=dict(
                            center=dict(x=-0.2, y=-0.3, z=-0.55) 
                    )
                )
            )
            
            fig.show()
            
            html_str = pio.to_html(fig, include_plotlyjs='cdn', full_html=False)
            if c_col not in mineral_htmls.keys():
                mineral_htmls.update({c_col: [(f"{c_col} {i + 1} ", html_str)]})
            else:
                mineral_htmls[c_col].append((f"{c_col} {i + 1} ", html_str))
                
            
            if png_save == True:
                # Save PNG file
                png_filename = f"{short_header}_{base_name}.png"
                try:
                    fig.write_image(png_filename, width=800, height=600)
                    print(f"Saved PNG: {png_filename}")
                except Exception as e:
                    print(f"PNG save failed for {path}: {e}")
        

# Split into multiple pages
page_files = []
total_pages = len(list(mineral_htmls.keys()))
for key in list(mineral_htmls.keys()):
    page_plots = list(mineral_htmls[key])
    page_title = key.split('(')[0]
    page_filename = f"{page_title}_isosurfaces_{html_addition}.html"
    page_files.append(page_filename)

    with open(page_filename, "w") as f:
        f.write("<html><head>")
        # if page_num == 0:
        #     f.write("<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>")
        f.write("</head><body>")
        f.write("<style>.plot-row{display:flex;justify-content:space-around;flex-wrap:wrap;}</style>\n")
        for i in range(0, len(page_plots), 2):
            f.write('<div class="plot-row">\n')
            f.write(page_plots[i][1])
            if i + 1 < len(page_plots):
                f.write(page_plots[i + 1][1])
            f.write('</div>\n')
        f.write("</body></html>")

    print(f"Saved: {page_filename}")

# Create index.html only if there's more than one page
if len(page_files) > 1:
    with open("isosurfaces_index.html", "w") as f:
        f.write("<html><body><h1>Isosurface Plot Index</h1><ul>")
        for i, pf in enumerate(page_files):
            f.write(f'<li><a href="{pf}">Page {i + 1}</a></li>')
        f.write("</ul></body></html>")

    print("Created index: isosurfaces_index.html")

